AWSTemplateFormatVersion: 2010-09-09

Conditions: {}

Description: Self-deploying Jenkins server

Mappings:

  Regions:
    ap-northeast-1:
      ImageId: ami-04889a6a
    ap-northeast-2:
      ImageId: ami-84d810ea
    ap-south-1:
      ImageId: ami-66cca709
    ap-southeast-1:
      ImageId: ami-28588d4b
    ap-southeast-2:
      ImageId: ami-80e8cae3
    eu-central-1:
      ImageId: ami-eef91981
    eu-west-1:
      ImageId: ami-809012f3
    sa-east-1:
      ImageId: ami-29e36d45
    us-east-1:
      ImageId: ami-65e5f60f
    us-west-1:
      ImageId: ami-913d42f1
    us-west-2:
      ImageId: ami-aeec1bce

Metadata: {}

Outputs: {}

Parameters:

  AnsibleUrl:
    Type: String
    Default: https://github.com/dylanjgscott/jenkins.git
    Description: Ansible playbook location

  AnsibleVersion:
    Type: String
    Description: Ansible playbook version

  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-west-2:584259415401:certificate/fac69964-65b5-42f7-8cac-9a8a98154819
    Description: ARN of Certficate Manager resource

  InstanceType:
    Type: String
    Default: t2.nano
    Description: Instance type to use

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: diogenes
    Description: SSH key to use

  Project:
    Type: String
    Default: jenkins
    Description: Project name

Resources:

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT1H
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        PauseTime: PT1H
        WaitOnResourceSignals: true
    Metadata:
      AnsibleVersion: !Ref AnsibleVersion
    Properties:
      DesiredCapacity: 1
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 2
      MinSize: 1
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value: !Ref Project
      TargetGroupARNs:
      - !Ref HttpTargetGroup
      - !Ref HttpsTargetGroup
      VPCZoneIdentifier:
      - !Ref SubnetA
      - !Ref SubnetB
      - !Ref SubnetC

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
      - Key: Name
        Value: !Ref Project
      PerformanceMode: generalPurpose

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref CertificateArn
      DefaultActions:
      - TargetGroupArn: !Ref HttpsTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS

  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref HttpTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 81
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit ICMP, SSH and load balancer traffic
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        IpProtocol: tcp
        FromPort: 81
        ToPort: 81
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref Project

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 16
          VolumeType: gp2
      - DeviceName: xvda
        Ebs:
          VolumeSize: 4
          VolumeType: gp2
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId:
        !FindInMap
        - Regions
        - !Ref AWS::Region
        - ImageId
      InstanceMonitoring: false
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      PlacementTenancy: default
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/sh -e
            sysrc firstboot_pkgs_list="ansible awscli git python"
            cat > /etc/rc.local << EOF
            export PATH=\$PATH:/usr/local/bin
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            ansible-pull \
              -e ansible_python_interpreter=/usr/local/bin/python \
              -e jenkins_file_system=${FileSystem} \
              -U ${AnsibleUrl} \
              -C ${AnsibleVersion}
            cfn-signal \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource AutoScalingGroup \
              --exit-code \$?
            EOF

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
      - !Ref SubnetA
      - !Ref SubnetB
      - !Ref SubnetC
      Tags:
      - Key: Name
        Value: !Ref Project

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit ICMP, HTTP and HTTPS
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
      SubnetId: !Ref SubnetA

  MountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
      SubnetId: !Ref SubnetB

  MountTargetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
      SubnetId: !Ref SubnetC

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit ICMP and NFS
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
      - SourceSecurityGroupId: !Ref InstanceSecurityGroup
        IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 0
        - !GetAZs
      CidrBlock: 192.168.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 1
        - !GetAZs
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        !Select
        - 2
        - !GetAZs
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Ref Project
      VpcId: !Ref Vpc

  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref Project

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
